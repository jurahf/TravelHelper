// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TravelHelperDb;

namespace TravelHelperDb.Migrations
{
    [DbContext(typeof(TravelHelperDatabaseContext))]
    [Migration("20210519174247_CurrentTravelDate")]
    partial class CurrentTravelDate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.15")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("TravelHelperDb.CategorySet", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NaviId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ParentId")
                        .HasColumnName("Parent_Id")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ParentId")
                        .HasName("IX_FK_CategoryCategory");

                    b.ToTable("CategorySet");
                });

            modelBuilder.Entity("TravelHelperDb.CitySet", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Country")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Lat")
                        .HasColumnType("decimal(18, 10)");

                    b.Property<decimal>("Lng")
                        .HasColumnType("decimal(18, 10)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("CitySet");
                });

            modelBuilder.Entity("TravelHelperDb.Geo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnName("city")
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<string>("CityEn")
                        .IsRequired()
                        .HasColumnName("city_en")
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnName("country")
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<string>("CountryEn")
                        .IsRequired()
                        .HasColumnName("country_en")
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<string>("Lat")
                        .IsRequired()
                        .HasColumnName("lat")
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<string>("Lng")
                        .IsRequired()
                        .HasColumnName("lng")
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<int>("Population")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("population")
                        .HasColumnType("int")
                        .HasDefaultValueSql("('0')");

                    b.Property<string>("Region")
                        .IsRequired()
                        .HasColumnName("region")
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<string>("RegionEn")
                        .IsRequired()
                        .HasColumnName("region_en")
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.ToTable("geo");
                });

            modelBuilder.Entity("TravelHelperDb.NaviAddressInfoSet", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CategoryId")
                        .HasColumnName("Category_Id")
                        .HasColumnType("int");

                    b.Property<int?>("CityId")
                        .HasColumnName("City_Id")
                        .HasColumnType("int");

                    b.Property<string>("ContainerAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Latitude")
                        .HasColumnType("decimal(18, 10)");

                    b.Property<decimal>("Longitude")
                        .HasColumnType("decimal(18, 10)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Picture")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SelfAddress")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId")
                        .HasName("IX_FK_CategoryNaviAddressInfo");

                    b.HasIndex("CityId")
                        .HasName("IX_FK_CityNaviAddressInfo");

                    b.ToTable("NaviAddressInfoSet");
                });

            modelBuilder.Entity("TravelHelperDb.PlacePointSet", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CustomName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("NaviAddressInfoId")
                        .HasColumnName("NaviAddressInfo_Id")
                        .HasColumnType("int");

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.Property<int?>("ScheduleId")
                        .HasColumnName("Schedule_Id")
                        .HasColumnType("int");

                    b.Property<DateTime>("Time")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("NaviAddressInfoId")
                        .HasName("IX_FK_NaviAddressInfoPlacePoint");

                    b.HasIndex("ScheduleId")
                        .HasName("IX_FK_SchedulePlacePoint");

                    b.ToTable("PlacePointSet");
                });

            modelBuilder.Entity("TravelHelperDb.ScheduleSet", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime");

                    b.Property<int>("TempPoint")
                        .HasColumnType("int");

                    b.Property<int>("TravelId")
                        .HasColumnName("Travel_Id")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TravelId")
                        .HasName("IX_FK_TravelSchedule");

                    b.ToTable("ScheduleSet");
                });

            modelBuilder.Entity("TravelHelperDb.TravelCategory", b =>
                {
                    b.Property<int>("TravelCategoryCategoryId")
                        .HasColumnName("TravelCategory_Category_Id")
                        .HasColumnType("int");

                    b.Property<int>("CategoriesId")
                        .HasColumnName("Categories_Id")
                        .HasColumnType("int");

                    b.HasKey("TravelCategoryCategoryId", "CategoriesId");

                    b.HasIndex("CategoriesId")
                        .HasName("IX_FK_TravelCategory_Category");

                    b.ToTable("TravelCategory");
                });

            modelBuilder.Entity("TravelHelperDb.TravelSet", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CityId")
                        .HasColumnName("City_Id")
                        .HasColumnType("int");

                    b.Property<DateTime>("CurrentDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime");

                    b.Property<int>("UserId")
                        .HasColumnName("User_Id")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CityId")
                        .HasName("IX_FK_CityTravel");

                    b.HasIndex("UserId")
                        .HasName("IX_FK_UserTravel");

                    b.ToTable("TravelSet");
                });

            modelBuilder.Entity("TravelHelperDb.UserSet", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Login")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("UserSettingsId")
                        .HasColumnName("UserSettings_Id")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserSettingsId")
                        .HasName("IX_FK_UserSettingsUser");

                    b.ToTable("UserSet");
                });

            modelBuilder.Entity("TravelHelperDb.UserSettingsSet", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("SelectedTravelId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("UserSettingsSet");
                });

            modelBuilder.Entity("TravelHelperDb.CategorySet", b =>
                {
                    b.HasOne("TravelHelperDb.CategorySet", "Parent")
                        .WithMany("InverseParent")
                        .HasForeignKey("ParentId")
                        .HasConstraintName("FK_CategoryCategory");
                });

            modelBuilder.Entity("TravelHelperDb.NaviAddressInfoSet", b =>
                {
                    b.HasOne("TravelHelperDb.CategorySet", "Category")
                        .WithMany("NaviAddressInfoSet")
                        .HasForeignKey("CategoryId")
                        .HasConstraintName("FK_CategoryNaviAddressInfo");

                    b.HasOne("TravelHelperDb.CitySet", "City")
                        .WithMany("NaviAddressInfoSet")
                        .HasForeignKey("CityId")
                        .HasConstraintName("FK_CityNaviAddressInfo");
                });

            modelBuilder.Entity("TravelHelperDb.PlacePointSet", b =>
                {
                    b.HasOne("TravelHelperDb.NaviAddressInfoSet", "NaviAddressInfo")
                        .WithMany("PlacePointSet")
                        .HasForeignKey("NaviAddressInfoId")
                        .HasConstraintName("FK_NaviAddressInfoPlacePoint")
                        .IsRequired();

                    b.HasOne("TravelHelperDb.ScheduleSet", "Schedule")
                        .WithMany("PlacePointSet")
                        .HasForeignKey("ScheduleId")
                        .HasConstraintName("FK_SchedulePlacePoint");
                });

            modelBuilder.Entity("TravelHelperDb.ScheduleSet", b =>
                {
                    b.HasOne("TravelHelperDb.TravelSet", "Travel")
                        .WithMany("ScheduleSet")
                        .HasForeignKey("TravelId")
                        .HasConstraintName("FK_TravelSchedule")
                        .IsRequired();
                });

            modelBuilder.Entity("TravelHelperDb.TravelCategory", b =>
                {
                    b.HasOne("TravelHelperDb.CategorySet", "Categories")
                        .WithMany("TravelCategory")
                        .HasForeignKey("CategoriesId")
                        .HasConstraintName("FK_TravelCategory_Category")
                        .IsRequired();

                    b.HasOne("TravelHelperDb.TravelSet", "TravelCategoryCategory")
                        .WithMany("TravelCategory")
                        .HasForeignKey("TravelCategoryCategoryId")
                        .HasConstraintName("FK_TravelCategory_Travel")
                        .IsRequired();
                });

            modelBuilder.Entity("TravelHelperDb.TravelSet", b =>
                {
                    b.HasOne("TravelHelperDb.CitySet", "City")
                        .WithMany("TravelSet")
                        .HasForeignKey("CityId")
                        .HasConstraintName("FK_CityTravel")
                        .IsRequired();

                    b.HasOne("TravelHelperDb.UserSet", "User")
                        .WithMany("TravelSet")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_UserTravel")
                        .IsRequired();
                });

            modelBuilder.Entity("TravelHelperDb.UserSet", b =>
                {
                    b.HasOne("TravelHelperDb.UserSettingsSet", "UserSettings")
                        .WithMany("UserSet")
                        .HasForeignKey("UserSettingsId")
                        .HasConstraintName("FK_UserSettingsUser");
                });
#pragma warning restore 612, 618
        }
    }
}

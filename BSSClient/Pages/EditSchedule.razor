@page "/EditSchedule/{travelId:int}/{scheduleId:int}"

@using CoreImplementation.Model;
@using CoreImplementation.ServiceInterfaces;

@inject ITravelService travelService


<div class="flex-column full-width">

    <div class="row margin-top-2">
        <div class="col col-12 col-sm-10 offset-sm-1 col-lg-8 offset-lg-2">
            <h4>Редактировать расписание на @schedule.Date.ToString("dd.MM.yyyy")</h4>
        </div>
    </div>



    <div class="row margin-top-2">
        <div class="col col-12 col-sm-10 offset-sm-1 col-lg-8 offset-lg-2">

            <table class="table table-bordered">
                @foreach (var place in schedule.PlacePoint.OrderBy(x => x.Order))
                {
                    <tr>
                        <td>@(place.Order + 1)</td>
                        <td>@place.Time.ToString("HH:mm")</td>
                        <td>@place.CustomName</td>
                        <td>
                            <div class="btn-toolbar" role="toolbar" aria-label="Действия">
                                <div class="btn-group mr-2" role="group" aria-label="group-move">
                                    <button type="button" class="btn btn-info" disabled="@(place.Order <= 0)" @onclick="() => Up(place)"><span class="oi oi-arrow-thick-top"></span></button>
                                    <button type="button" class="btn btn-info" disabled="@(place.Order + 1 >= schedule.PlacePoint.Count())"  @onclick="() => Down(place)"><span class="oi oi-arrow-thick-bottom"></span></button>
                                    <button type="button" class="btn-pseudo"></button>
                                    <button type="button" class="btn btn-success"><span class="oi oi-plus"></span></button>
                                    <button type="button" class="btn-pseudo"></button>
                                    <button type="button" class="btn-pseudo"></button>
                                    <button type="button" class="btn btn-danger" @onclick="() => Remove(place)"><span class="oi oi-trash"></span></button>
                                </div>
                                <div class="btn-group mr-2" role="group" aria-label="group-del">
                                </div>
                            </div>
                        </td>
                    </tr>
                }
            </table>

        </div>
    </div>

    <div class="row margin-top-2">
        <div class="col offset-8 col-4 col-sm-4 offset-sm-8 col-lg-4 offset-lg-8">
            <button type="button" class="btn btn-light">Отмена</button>
            <button type="button" class="btn btn-success">Сохранить</button>
        </div>
    </div>

</div>


@code {

    [Parameter]
    public int TravelId { get; set; }

    [Parameter]
    public int ScheduleId { get; set; }

    private VMSchedule schedule;



    protected override void OnInitialized()
    {
        schedule = travelService.GetSchedule(ScheduleId);

        base.OnInitialized();
    }


    private void Remove(VMPlacePoint place)
    {
        TimeSpan duration = FindDuration(place);
        int order = place.Order;

        foreach (var i in schedule.PlacePoint.Skip(order + 1))
        {
            i.Order--;
            i.Time -= duration;
        }

        schedule.PlacePoint.Remove(place);
    }


    private void Up(VMPlacePoint place)
    {
        if (place == null)
            return;

        VMPlacePoint prevPlace = schedule.PlacePoint.FirstOrDefault(p => p.Order == place.Order - 1);

        if (prevPlace != null)
        {
            ExchangeTime(place, prevPlace);

            place.Order--;
            prevPlace.Order++;
        }
    }


    private void Down(VMPlacePoint place)
    {
        if (place == null)
            return;

        VMPlacePoint nextPlace = schedule.PlacePoint.FirstOrDefault(p => p.Order == place.Order + 1);

        if (nextPlace != null)
        {
            ExchangeTime(place, nextPlace);

            place.Order++;
            nextPlace.Order--;
        }
    }


    private void ExchangeTime(VMPlacePoint x, VMPlacePoint y)
    {
        VMPlacePoint first = x.Time < y.Time ? x : y;
        VMPlacePoint second = x.Time > y.Time ? x : y;

        DateTime firstStart = first.Time;
        TimeSpan secondDuration = FindDuration(second);

        second.Time = firstStart;
        first.Time = firstStart + secondDuration;
    }


    private readonly TimeSpan defaultDuration = TimeSpan.FromHours(1);
    private TimeSpan FindDuration(VMPlacePoint placePoint)
    {
        VMPlacePoint nextPlace = schedule.PlacePoint.FirstOrDefault(p => p.Order == placePoint.Order + 1);

        if (nextPlace != null)
            return nextPlace.Time - placePoint.Time;
        else
            return defaultDuration;
    }




}

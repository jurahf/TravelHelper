@page "/"

@using System.Security.Claims;
@using Microsoft.AspNetCore.Http;
@using CoreImplementation.ServiceInterfaces;
@using CoreImplementation.Model;

@inject IHttpContextAccessor httpContextAccessor
@inject IJSRuntime JS
@inject ITravelService travelService
@inject IUserService userService


<div class="sidebar">
    <NavMenu Travel="travel" />
</div>

<div class="main">
    <div class="content-container">
        <div>
            <div id="map"></div>
        </div>
    </div>
</div>


@code {

    private VMTravel travel;


    protected override void OnInitialized()
    {
        ClaimsPrincipal principal = httpContextAccessor.HttpContext.User;

        if (!string.IsNullOrEmpty(principal?.Identity?.Name))
        {
            GetAndFillUserData(principal);
        }

        base.OnInitialized();
    }


    private void GetAndFillUserData(ClaimsPrincipal principal)
    {
        VMUser user = userService.ExtractUserData(principal);

        if (user == null)
            return;


        List<VMTravel> travelList = travelService.GetTravelsList(user);

        if (travelList == null || !travelList.Any())
        {
            travelService.CreateDefaultDataForUser(user);
            travelList = travelService.GetTravelsList(user); // второй раз
        }

        int? selectedId = travelService.GetSelectedTravelId(user); // почему сразу не получить путешествие?

        if (selectedId != null)
        {
            travel = travelList.FirstOrDefault(x => x.Id == selectedId.Value);
        }
    }



    protected async override Task OnAfterRenderAsync(bool firstRender)
    {
        List<MapPointForJs> mapPoints = new List<MapPointForJs>();
        CityForJs mapCity = null;

        if (travel != null)
        {
            foreach (var schedule in travel.Schedules)
            {
                foreach (var point in schedule.PlacePoint)
                {
                    mapPoints.Add(new MapPointForJs()
                    {
                        Lng = (double)point.AddressInfo.Longitude,
                        Lat = (double)point.AddressInfo.Latitude,
                        Caption = point.CustomName,
                        ShortDescription = point.AddressInfo.ЗатравочкаОписания,
                        Description = point.AddressInfo.Description,
                        ImageLink = point.AddressInfo.SafePictureUrl,
                        Order = point.Order,
                        Today = schedule.Date == travel.StartDate // TODO: смотреть на выбранную дату
                    });
                }
            }

            mapCity = new CityForJs()
            {
                Lat = (double)travel.City.Lat,
                Lng = (double)travel.City.Lng,
                Name = travel.City.Name
            };
        }


        // вызываем инициализацию карты: массив точек, стартовый город, id контейнера карты
        await JS.InvokeVoidAsync("getGeolocationAndInitMap", mapPoints, mapCity, "map");
    }




    public class CityForJs
    {
        public string Name { get; set; }
        public double Lng { get; set; }
        public double Lat { get; set; }
    }


    public class MapPointForJs
    {
        public double Lng { get; set; }
        public double Lat { get; set; }
        public string Caption { get; set; }
        public string ShortDescription { get; set; }
        public string Description { get; set; }
        public string ImageLink { get; set; }
        public bool Today { get; set; }
        public int Order { get; set; }
    }


}
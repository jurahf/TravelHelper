@page "/"

@using System.Security.Claims;
@using Microsoft.AspNetCore.Http;
@using CoreImplementation.ServiceInterfaces;
@using CoreImplementation.Model;

@inject NavigationManager NavigationManager
@inject IHttpContextAccessor httpContextAccessor
@inject IJSRuntime JS
@inject ITravelService travelService
@inject IUserService userService


<div class="sidebar">
    <NavMenu 
             AllTravels="travelList"
             SelectedTravel="travel" 
             NextPointClicked="OnNextPointClickedAsync" 
             ScheduleSelected="(date) => OnScheduleSelectedAsync((DateTime)date)" 
             EditDayClicked="OnEditDayClicked" 
             NewTravelClicked="OnNewTravelClicked"
             SelectTravelClicked="(travel) => OnSelectTravelClicked((VMTravel)travel)"/>
</div>

<div class="main">
    <div class="content-container">
        <div>
            <div id="map"></div>
        </div>
    </div>
</div>


@code {

    private VMUser user;
    private VMTravel travel;
    private List<VMTravel> travelList = new List<VMTravel>();


    protected override void OnInitialized()
    {
        ClaimsPrincipal principal = httpContextAccessor.HttpContext.User;

        if (!string.IsNullOrEmpty(principal?.Identity?.Name))
        {
            GetAndFillUserData(principal);
        }

        base.OnInitialized();
    }


    private void GetAndFillUserData(ClaimsPrincipal principal)
    {
        user = userService.ExtractUserData(principal);

        if (user == null)
            return;


        travelList = travelService.GetTravelsList(user);

        if (travelList == null || !travelList.Any())
        {
            travelService.CreateDefaultDataForUser(user);
            travelList = travelService.GetTravelsList(user); // второй раз
        }

        int? selectedId = travelService.GetSelectedTravelId(user); // почему сразу не получить путешествие?

        if (selectedId != null)
        {
            travel = travelList.FirstOrDefault(x => x.Id == selectedId.Value);
        }
    }


    private async void OnNextPointClickedAsync()
    {
        if (travel == null)
            return;

        travel = travelService.MoveToNextPoint(travel);

        await SelectDateAndPointOnMap();
    }


    private async void OnScheduleSelectedAsync(DateTime selectedDate)
    {
        if (travel == null)
            return;

        travel = travelService.MoveToDate(travel, selectedDate);

        await SelectDateAndPointOnMap();
    }


    private async Task SelectDateAndPointOnMap()
    {
        VMSchedule currentSchedule = travel.Schedules.FirstOrDefault(s => s.Date == travel.CurrentDate);
        if (currentSchedule == null)
            currentSchedule = travel.Schedules.FirstOrDefault();

        int currentPoint = currentSchedule.TempPoint;

        await JS.InvokeVoidAsync("selectDateAndPoint", currentSchedule.Date, currentPoint);
    }




    protected async override Task OnAfterRenderAsync(bool firstRender)
    {
        if (!firstRender)
            return;

        List<MapPointForJs> mapPoints = new List<MapPointForJs>();
        CityForJs mapCity = null;

        if (travel != null)
        {
            // формируем набор точек на карте
            foreach (var schedule in travel.Schedules)
            {
                foreach (var point in schedule.PlacePoint)
                {
                    mapPoints.Add(new MapPointForJs()
                    {
                        AddrId = point.AddressInfo.Id,
                        Lng = (double)point.AddressInfo.Longitude,
                        Lat = (double)point.AddressInfo.Latitude,
                        Caption = point.CustomName,
                        ShortDescription = point.AddressInfo.ЗатравочкаОписания,
                        Description = point.AddressInfo.Description,
                        ImageLink = point.AddressInfo.SafePictureUrl,
                        Order = point.Order,
                        Date = schedule.Date
                    });
                }
            }

            mapCity = new CityForJs()
            {
                Lat = (double)travel.City.Lat,
                Lng = (double)travel.City.Lng,
                Name = travel.City.Name
            };


            // выбрать текущие расписание и точку
            VMSchedule currentSchedule = travel.Schedules.FirstOrDefault(s => s.Date == travel.CurrentDate);
            if (currentSchedule == null)
                currentSchedule = travel.Schedules.FirstOrDefault();

            int currentPoint = currentSchedule?.TempPoint ?? 0;


            // вызываем инициализацию карты: массив точек, стартовый город, id контейнера карты, выбранная дата, выбранная точка
            await JS.InvokeVoidAsync("getGeolocationAndInitMap", mapPoints.OrderBy(x => x.Order), mapCity, "map", currentSchedule?.Date ?? DateTime.Today, currentPoint);
        }
        else
        {
            // показываем пустую карту
            await JS.InvokeVoidAsync("getGeolocationAndInitMap", new List<MapPointForJs>(), null, "map", DateTime.Today, 0);
        }
    }


    private void OnEditDayClicked()
    {
        VMSchedule currentSchedule = travel?.Schedules.FirstOrDefault(s => s.Date == travel.CurrentDate);

        if (currentSchedule == null)
            return;

        NavigationManager.NavigateTo($"/EditSchedule/{travel.Id}/{currentSchedule.Id}");
    }


    private void OnNewTravelClicked()
    {
        NavigationManager.NavigateTo($"/NewTravel");
    }


    private void OnSelectTravelClicked(VMTravel travel)
    {
        travelService.SelectTravel(user, travel.Id);
        NavigationManager.NavigateTo("/", forceLoad: true);
    }



    public class CityForJs
    {
        public string Name { get; set; }
        public double Lng { get; set; }
        public double Lat { get; set; }
    }


    public class MapPointForJs
    {
        public int AddrId { get; set; }
        public double Lng { get; set; }
        public double Lat { get; set; }
        public string Caption { get; set; }
        public string ShortDescription { get; set; }
        public string Description { get; set; }
        public string ImageLink { get; set; }
        public int Order { get; set; }
        public DateTime Date { get; set; }
    }


}
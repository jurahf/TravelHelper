@using System.Security.Claims
@using Microsoft.AspNetCore.Http
@using CoreImplementation.ServiceInterfaces;
@using CoreImplementation.Model;

@inject IHttpContextAccessor httpContextAccessor
@inject IUserService userService


<div class="top-row pl-4 navbar navbar-dark">
    <a class="navbar-brand" href=""><span class="oi oi-globe"></span> Travel Helper</a>
    <button class="navbar-toggler" @onclick="ToggleNavMenu">
        <span class="navbar-toggler-icon"></span>
    </button>
</div>

<div class="@NavMenuCssClass" @onclick="ToggleNavMenu">
    <ul class="nav flex-column ml-auto">
        <li class="nav-item px-3">
            <NavLink class="nav-link" href="" Match="NavLinkMatch.All">
                <span class="oi oi-home" aria-hidden="true"></span> Домашняя страница
            </NavLink>
        </li>

        <li class="nav-item px-3 dropdown">
            <NavLink class="nav-link dropdown-toggle" href="" Match="NavLinkMatch.All" id="navbarDropdownMenuLink" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                <b>@(SelectedTravel?.Name ?? "Путешествие не выбрано")</b>
            </NavLink>

            <div class="dropdown-menu" aria-labelledby="navbarDropdownMenuLink">
                @foreach (var innerTravel in AllTravels)
                {
                    <NavLink class="dropdown-item" href="" @onclick="() => OnSelectTravelClicked(innerTravel)">
                        <span>@innerTravel.Name</span>
                    </NavLink>
                }
            </div>
        </li>

        @if (SelectedTravel != null)
        {
            <li class="nav-item px-3">
                <NavLink class="nav-link non-selectable" href="" Match="NavLinkMatch.All">
                    <span class="oi oi-calendar" aria-hidden="true"></span> Расписание по дням
                </NavLink>
            </li>

            <li class="nav-item px-3">
                <NavLink class="nav-link non-selectable" href="" Match="NavLinkMatch.All">
                    <div class="btn-group" role="group" aria-label="Basic example">
                        @foreach (var sch in SelectedTravel.Schedules.OrderBy(x => x.Date))
                        {
                            <button type="button" class="btn btn-primary @(sch.Date == SelectedTravel.CurrentDate ? "active" : "" )" @onclick="() => OnScheduleSelected(sch.Date)">@((sch.Date - SelectedTravel.StartDate).TotalDays + 1)</button>
                        }
                    </div>
                </NavLink>
            </li>

            <li class="nav-item px-3">
                <NavLink class="nav-link" href="" Match="NavLinkMatch.All" @onclick="OnEditDayClicked">
                    <span class="oi oi-pencil" aria-hidden="true"></span> Редактировать день
                </NavLink>
            </li>

            <li class="nav-item px-3">
                <NavLink class="nav-link" href="" Match="NavLinkMatch.All" @onclick="OnNextPointClicked">
                    <span class="oi oi-map" aria-hidden="true"></span> Следующая точка
                </NavLink>
            </li>

        }

        @if (!string.IsNullOrEmpty(user?.Email))
        {
            <li class="nav-item px-3">
                <NavLink class="nav-link" href="" Match="NavLinkMatch.All" @onclick="OnNewTravelClicked">
                    <span class="oi oi-plus" aria-hidden="true"></span> Новое путешествие
                </NavLink>
            </li>
        }

    </ul>


    <div class="sidebar-bottom">
        <ul class="nav flex-column ml-auto">
            <li class="nav-item px-3">
                <LoginControl></LoginControl>
            </li>
        </ul>
    </div>
</div>





@code {

    [Parameter]
    public List<VMTravel> AllTravels { get; set; }

    [Parameter]
    public VMTravel SelectedTravel { get; set; }

    [Parameter]
    public EventCallback NextPointClicked { get; set; }

    [Parameter]
    public EventCallback<DateTime> ScheduleSelected { get; set; }

    [Parameter]
    public EventCallback EditDayClicked { get; set; }

    [Parameter]
    public EventCallback NewTravelClicked { get; set; }

    [Parameter]
    public EventCallback<VMTravel> SelectTravelClicked { get; set; }

    private VMUser user;

    private bool collapseNavMenu = true;

    private string NavMenuCssClass => collapseNavMenu ? "collapse" : null;

    private void ToggleNavMenu()
    {
        collapseNavMenu = !collapseNavMenu;
    }


    protected override Task OnInitializedAsync()
    {
        try
        {
            var principal = httpContextAccessor.HttpContext.User;

            user = userService.ExtractUserData(principal);
        }
        catch
        {
        }

        return base.OnInitializedAsync();
    }

    private void OnNextPointClicked()
    {
        NextPointClicked.InvokeAsync(null);
    }

    private void OnScheduleSelected(DateTime date)
    {
        ScheduleSelected.InvokeAsync(date);
    }

    private void OnEditDayClicked()
    {
        EditDayClicked.InvokeAsync(null);
    }

    private void OnNewTravelClicked()
    {
        NewTravelClicked.InvokeAsync(null);
    }

    private void OnSelectTravelClicked(VMTravel travel)
    {
        SelectTravelClicked.InvokeAsync(travel);
    }

}